<div id="readArea">
      <button onclick="connectMetamask()">CONNECT TO METAMASK</button>
      <p id="userArea">Status: Not connected to Metamask</p>

      <button onclick="connectContract()">CONNECT TO CONTRACT</button>
      <p id="contractArea">Status: Not connected to Contract</p>

      <button onclick="getContractAccount()"> GET CONTRACT ACCOUNT </button>
      <p id="contractAccount">Contract Account: Not Connected to Contract</p>

      <button onclick="getBalanceApple()">GET BALANCE OF THE CONTRACT</button>
      <p id="balanceArea">Balance: Not Connected to Contract</p>

</div>

<div id="writeArea">
    <button onclick="depositContract()">Send ether to the Contract</button><br>
    <input type="number" id="depositInput" placeholder="Enter Amount"><br> <br>

    <button onclick="withdraw()">WITHDRAW ETHER TO ANY ADDRESS</button> <br>
    <input type="text" id="addressInput" placeholder="Enter Address"> <br>
    <input type="number" id="amountInput" placeholder="Enter Amount">
</div>

<script>

    let account;
    const connectMetamask = async () => {
        if(window.ethereum !== "undefined") {
            const accounts = await ethereum.request({method: "eth_requestAccounts"});
            account = accounts[0];
            document.getElementById("userArea").innerHTML = `User Account: ${account}`;
        }
    }

    const connectContract = async () => {
        const ABI = [
            {
                "inputs": [],
                "name": "deposit",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address payable",
                        "name": "_to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "_amount",
                        "type": "uint256"
                    }
                ],
                "name": "withdraw",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getBalance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];
        const Address = "0x2b7E447ffC9259bAeac2Dd766891408a271C857c";
        window.web3 = await new Web3(window.ethereum);
        console.log(window.web3);
        window.contract = await new window.web3.eth.Contract(ABI, Address);
        console.log(window.contract);
        document.getElementById("contractArea").innerHTML = "Connected to Contract";
    }

    const getContractAccount = async () => {
        const data = await window.contract.methods.getAddress().call();
        document.getElementById("contractAccount").innerHTML = `Connected to contract Account: ${data}`;
    }

    const getBalanceApple = async () => {
        const data = await window.contract.methods.getBalance().call();
        document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
    }

    const depositContract = async () => {
        const amount = document.getElementById("depositInput").value;
        await window.contract.methods.deposit().send({from: account, value: amount});
    }

    const withdraw = async () => {
        const amount = document.getElementById("amountInput").value; // get amoubt from validation view
        const address = document.getElementById("addressInput").value; // get address from validation view
        await window.contract.methods.withdraw(address, amount).send({from: account});
    }

</script>
